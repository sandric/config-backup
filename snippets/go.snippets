#variables and constants level

#variables

snippet vb "varidable boolean" b
var ${1:name} bool
endsnippet

snippet vn "varidable integer" b
var ${1:name} int
endsnippet

snippet vf "varidable float" b
var ${1:name} float64
endsnippet

snippet vs "varidable string" b
var ${1:name} string
endsnippet


snippet vbf "varidable boolean with initialization as false" b
var ${1:name} bool = false
endsnippet

snippet vbt "varidable boolean with initialization as true" b
var ${1:name} bool = true
endsnippet

snippet vnn "varidable integer with initialization" b
var ${1:name} int = 0
endsnippet

snippet vff "varidable float with initialization" b
var ${1:name} float64 = 0
endsnippet

snippet vss "varidable string with initialization" b
var ${1:name} string = ''
endsnippet

#constants

snippet cbf "constant boolean with initialization as false" b
const ${1:name} bool = false
endsnippet

snippet cbt "constant boolean with initialization as true" b
const ${1:name} bool = true
endsnippet

snippet cnn "constant integer with initialization" b
const ${1:name} int = 0
endsnippet

snippet cff "constant float with initialization" b
const ${1:name} float64 = 0
endsnippet

snippet css "constant string with initialization" b
const ${1:name} string = ''
endsnippet


#block level

snippet i "if block" b
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet e "else block" b
else {
	${0:${VISUAL}}
}
endsnippet

snippet ie "if-else block" b
if ${1:condition}${1/(.+)/ /}{
	${2:${VISUAL}}
} else {
	${0:${VISUAL}}
}
endsnippet

snippet f "for block" b
for ${1:i} := 0; $1 < ${2:N}; $1++ {
	${0:${VISUAL}}
}
endsnippet

snippet fi "for-in block" b
for ${2:name} := range ${1:collection} {
	${0:${VISUAL}}
}
endsnippet

snippet w "while block" b
for ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet s "switch block" b
switch ${1:expression}${1/(.+)/ /}{
case${0}
}
endsnippet

snippet sc "case block" b
case ${1:condition}:
	${0:${VISUAL}}
endsnippet

snippet sd "default block" b
default:
	${0:${VISUAL}}
endsnippet


#architecture level

snippet cl "class block" b
type ${1:Struct} struct {
	${0:${VISUAL}}
}
endsnippet

snippet in "interface block" b
type ${1:Interface} interface {
	${0:${VISUAL}}
}
endsnippet

snippet fu "function block" b
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	${0:${VISUAL}}
}
endsnippet

snippet fur "function with receiver block" b
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	${0:${VISUAL}}
}
endsnippet


#global level

snippet h "headers declaration" b
import (
	"${1:package}"
)
endsnippet


#additional snippets

snippet p "print" b
fmt.Println("$0")
endsnippet

snippet po "print object" b
fmt.Println("$1:", $1)
endsnippet
